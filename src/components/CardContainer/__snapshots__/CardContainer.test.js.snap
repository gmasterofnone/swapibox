// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CardContainer matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CardContainer
    cards={
      Array [
        Object {
          "name": "Luke",
        },
        Object {
          "name": "Lando",
        },
        Object {
          "name": "R2-D2",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Card
          cardData={
            Object {
              "name": "Luke",
            }
          }
        />,
        <Card
          cardData={
            Object {
              "name": "Lando",
            }
          }
        />,
        <Card
          cardData={
            Object {
              "name": "R2-D2",
            }
          }
        />,
      ],
      "className": "card-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "Luke",
        "nodeType": "class",
        "props": Object {
          "cardData": Object {
            "name": "Luke",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "Lando",
        "nodeType": "class",
        "props": Object {
          "cardData": Object {
            "name": "Lando",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "R2-D2",
        "nodeType": "class",
        "props": Object {
          "cardData": Object {
            "name": "R2-D2",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Card
            cardData={
              Object {
                "name": "Luke",
              }
            }
          />,
          <Card
            cardData={
              Object {
                "name": "Lando",
              }
            }
          />,
          <Card
            cardData={
              Object {
                "name": "R2-D2",
              }
            }
          />,
        ],
        "className": "card-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "Luke",
          "nodeType": "class",
          "props": Object {
            "cardData": Object {
              "name": "Luke",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "Lando",
          "nodeType": "class",
          "props": Object {
            "cardData": Object {
              "name": "Lando",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "R2-D2",
          "nodeType": "class",
          "props": Object {
            "cardData": Object {
              "name": "R2-D2",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
